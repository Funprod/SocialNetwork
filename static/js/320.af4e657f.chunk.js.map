{"version":3,"file":"static/js/320.af4e657f.chunk.js","mappings":"kLACA,GAAgB,kBAAoB,mCAAmC,QAAU,yBAAyB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCO7KA,EAAa,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,GAAIC,EAA2B,EAA3BA,KAC7B,OACI,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACI,SAAC,KAAD,CAASC,GAAI,YAAcJ,EAA3B,SAAgCC,OCJ/BI,EAAU,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QACtB,OAAO,gBAAKJ,UAAWC,EAAAA,QAAhB,SAA4BG,K,uCC+BjCC,GAAcC,EAAAA,EAAAA,GAAiB,IAmB/BC,GAAsBC,EAAAA,EAAAA,GAAoB,CAAEC,KAAM,wBAA5BD,EAjBL,SAACE,GACpB,OACI,iBAAMC,SAAUD,EAAME,aAAtB,UACI,4BACI,SAACC,EAAA,EAAD,CACIC,QAAS,WACTC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,EAAUb,GACrBN,KAAM,iBACNoB,YAAa,uGAEjB,+F,oBC/BhB,GAAeC,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KAdtB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACC,GACtB,MAAO,CACHC,WAAY,SAACC,GACTF,GAASG,EAAAA,EAAAA,GAAwBD,SAK6CE,EAAAA,EAA1F,EDRmD,SAAC,GAAiC,IAA/BH,EAA8B,EAA9BA,WAAYF,EAAkB,EAAlBA,YAK9D,OACI,iBAAKvB,UAAWC,EAAAA,kBAAhB,WACI,gBAAKD,UAAWC,EAAAA,QAAhB,SACKsB,EAAYM,YAAYC,KAAI,SAACC,GAC1B,OAAO,SAAClC,EAAD,CAAuBE,KAAMgC,EAAEhC,KAAMD,GAAIiC,EAAEjC,IAA1BiC,EAAEjC,UAGlC,gBAAKE,UAAWC,EAAAA,SAAhB,SACKsB,EAAYS,aAAaF,KAAI,SAACG,GAC3B,OAAO,SAAC9B,EAAD,CAAoBC,QAAS6B,EAAE7B,SAAjB6B,EAAEnC,UAG/B,SAACS,EAAD,CAAqBI,SAhBP,SAACuB,GACnBT,EAAWS,EAAOR,0B,sHELpBS,EAAkB,SAACb,GAAD,MAA4C,CAChEc,OAAQd,EAAMe,KAAKD,SAGhB,SAASR,EAAiBU,GAS7B,OAFiCjB,EAAAA,EAAAA,IAAQc,EAARd,EANP,SAACX,GACvB,IAAM0B,EAAyB1B,EAAzB0B,OAAWG,GAAjB,OAA+B7B,EAA/B,GACA,OAAK0B,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUrC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messagesContainer\":\"Dialogs_messagesContainer__hOaMO\",\"dialogs\":\"Dialogs_dialogs__u5iKH\",\"active\":\"Dialogs_active__OKiI4\",\"messages\":\"Dialogs_messages__tqywT\",\"message\":\"Dialogs_message__UrTFg\"};","import { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\n\r\nexport type DialogItemType = {\r\n    id: number;\r\n    name: string;\r\n};\r\n\r\nexport const DialogItem = ({ id, name }: DialogItemType) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={'/Dialogs/' + id}>{name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n","import s from './../Dialogs.module.css';\r\n\r\nexport type MessageType = {\r\n    id?: number;\r\n    message: string;\r\n};\r\n\r\nexport const Message = ({ message }: MessageType) => {\r\n    return <div className={s.message}>{message}</div>;\r\n};\r\n","import s from './Dialogs.module.css';\r\nimport { DialogItem } from './DialogItem/DialogsItem';\r\nimport { Message } from './Message/Message';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { FormControl } from '../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validator';\r\nimport { DialogsPageTypeStore } from '../../redux/dialogs-reducer';\r\n\r\ntype DialogsStateType = {\r\n    addMessage: (newMessageBody: string) => void;\r\n    dialogsPage: DialogsPageTypeStore;\r\n};\r\n\r\nexport const Dialogs: React.FC<DialogsStateType> = ({ addMessage, dialogsPage }) => {\r\n    const addNewMessage = (values: FormData) => {\r\n        addMessage(values.newMessageBody);\r\n    };\r\n\r\n    return (\r\n        <div className={s.messagesContainer}>\r\n            <div className={s.dialogs}>\r\n                {dialogsPage.dialogsData.map((d) => {\r\n                    return <DialogItem key={d.id} name={d.name} id={d.id} />;\r\n                })}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {dialogsPage.messagesData.map((m) => {\r\n                    return <Message key={m.id} message={m.message} />;\r\n                })}\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage} />\r\n        </div>\r\n    );\r\n};\r\n\r\ntype FormData = {\r\n    newMessageBody: string;\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props: InjectedFormProps<FormData>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    tagName={'textarea'}\r\n                    component={FormControl}\r\n                    validate={[required, maxLength50]}\r\n                    name={'newMessageBody'}\r\n                    placeholder={'Введите сообщение'}\r\n                />\r\n                <button>Отправить</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm<FormData>({ form: 'dialogAddMessageForm' })(AddMessageForm);\r\n","import { connect } from 'react-redux';\r\nimport { addMessageActionCreator } from '../../redux/dialogs-reducer';\r\nimport { Dialogs } from './Dialogs';\r\nimport { RootState } from '../../redux/redux-store';\r\nimport { compose, Dispatch } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addMessage: (newMessageBody: string) => {\r\n            dispatch(addMessageActionCreator(newMessageBody));\r\n        },\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);\r\n","import { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RootState } from '../redux/redux-store';\r\nimport { ComponentType } from 'react';\r\nimport { Preloader } from '../components/common/Preloader/Preloader';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth?: boolean;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport function withAuthRedirect(Component: ComponentType<any>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let { isAuth, ...restProps } = props;\r\n        if (!isAuth) return <Redirect to={'/login'} />;\r\n        return <Component {...restProps} />;\r\n    };\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n\r\n    return ConnectedRedirectComponent;\r\n}\r\n"],"names":["DialogItem","id","name","className","s","to","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","props","onSubmit","handleSubmit","Field","tagName","component","FormControl","validate","required","placeholder","compose","connect","state","dialogsPage","dispatch","addMessage","newMessageBody","addMessageActionCreator","withAuthRedirect","dialogsData","map","d","messagesData","m","values","mapStateToProps","isAuth","auth","Component","restProps"],"sourceRoot":""}