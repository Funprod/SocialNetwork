{"version":3,"file":"static/js/445.7f41de53.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__BwQgo\",\"posts\":\"MyPosts_posts__hp9L6\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__KqncI\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nexport type PostType = {\r\n    id?: number;\r\n    message: string;\r\n    likeCount: number;\r\n};\r\n\r\nexport const Post: React.FC<PostType> = ({ message, likeCount }) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://sun9-57.userapi.com/c302402/u169346695/-6/x_cdab859e.jpg\"\r\n                alt=\"\"\r\n            />\r\n            {message}\r\n            <div>\r\n                <span>like</span>\r\n                <span>{likeCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport { Post } from './Post/Post';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validator';\r\nimport { FormControl } from '../../common/FormsControls/FormsControls';\r\n\r\nexport const MyPosts: React.FC<MyPostDataType> = ({ postData, addPost }) => {\r\n    const addNewPost = (values: FormData) => {\r\n        addPost(values.addNewPost);\r\n    };\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My Posts</h3>\r\n            <div>\r\n                <AddNewPostRedux onSubmit={addNewPost} />\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postData.map((p) => {\r\n                    return <Post key={p.id} message={p.message} likeCount={p.likeCount} />;\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype FormData = {\r\n    addNewPost: string;\r\n};\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nexport const AddNewPost = (props: InjectedFormProps<FormData>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Введите текст'}\r\n                    name={'addNewPost'}\r\n                    tagName={'textarea'}\r\n                    component={FormControl}\r\n                    validate={[required, maxLength10]}\r\n                />\r\n                <div>\r\n                    <button>Add post</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddNewPostRedux = reduxForm<FormData>({ form: 'profileAddNewPost' })(AddNewPost);\r\n\r\n//types\r\n\r\nexport type PostDataTypeStore = {\r\n    id?: number;\r\n    message: string;\r\n    likeCount: number;\r\n};\r\n\r\ntype MyPostDataType = {\r\n    postData: PostDataTypeStore[];\r\n    addPost: (addNewPost: string) => void;\r\n};\r\n","import { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport { MyPosts } from './MyPosts';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../../../redux/redux-store';\r\nimport { Dispatch } from 'redux';\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        postData: state.profilePage.postData,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (addNewPost: string) => {\r\n            dispatch(addPostActionCreator(addNewPost));\r\n        },\r\n    };\r\n};\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__qmRhl\"};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__moFQJ\"};","import { ChangeEvent, useEffect, useState } from 'react';\r\n\r\nexport type ProfileStatus = {\r\n    status: string;\r\n    updateStatus: (status: string) => void;\r\n};\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatus) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [status, setStatus] = useState<string>(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {editMode ? (\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode} value={status} />\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'статус'}</span>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import { UserDataType } from '../../../redux/profile-reducer';\r\nimport { Preloader } from '../../common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport userPhoto from '../../../assets/img/images.png';\r\nimport { ProfileStatusWithHooks } from './ProfileStatusWithHooks';\r\n\r\nexport type ProfileInfoType = {\r\n    profile: UserDataType;\r\n    status: string;\r\n    updateStatus: (status: string) => void;\r\n    isLoading: boolean;\r\n};\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({ profile, status, updateStatus, isLoading }) => {\r\n    if (isLoading) {\r\n        return <Preloader />;\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {/* <img src=\"https://i.pinimg.com/736x/56/bc/92/56bc92d7cad2131fb87f52af3cd3e71c.jpg\" alt=\"#\" /> */}\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img\r\n                    src={profile.photos.large !== null ? profile.photos.small : userPhoto}\r\n                    alt=\"Здесь должна быть ваша фотография\"\r\n                />\r\n                <h2>{profile.fullName}</h2>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n                <ul>\r\n                    Контакты:\r\n                    <li>{profile.contacts.github}</li>\r\n                    <li>{profile.contacts.vk}</li>\r\n                    <li>{profile.contacts.instagram}</li>\r\n                    <li>{profile.contacts.twitter}</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { UserDataType } from '../../redux/profile-reducer';\r\nimport { MyPostsContainer } from './MyPosts/MyPostsContainer';\r\nimport s from './Profile.module.css';\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\r\n\r\nexport type ProfileType = {\r\n    // store: ProfilePageType;\r\n    profile: UserDataType;\r\n    status: string;\r\n    updateStatus: (status: string) => void;\r\n    isLoading: boolean;\r\n};\r\n\r\nexport const Profile: React.FC<ProfileType> = ({ profile, status, updateStatus, isLoading }) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus} isLoading={isLoading} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Profile } from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../../redux/redux-store';\r\nimport { getUserProfile, getUserStatus, updateUserStatus, UserDataType } from '../../redux/profile-reducer';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\ntype PathParamsType = {\r\n    userId: string;\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    profile: UserDataType;\r\n    status: string;\r\n    isAuth: boolean;\r\n    isLoading: boolean;\r\n    authUserId: number;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (usersId: string) => void;\r\n    getUserStatus: (userId: string) => void;\r\n    updateUserStatus: (status: string) => void;\r\n};\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileType;\r\n\r\ntype ProfileType = MapStateToPropsType & MapDispatchPropsType;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount(): void {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) userId = this.props.authUserId.toString();\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateUserStatus}\r\n                isLoading={this.props.isLoading}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    isAuth: state.auth.isAuth,\r\n    isLoading: state.profilePage.isLoading,\r\n    authUserId: state.auth.id,\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus }),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer);\r\n","import { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { RootState } from '../redux/redux-store';\r\nimport { ComponentType } from 'react';\r\nimport { Preloader } from '../components/common/Preloader/Preloader';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth?: boolean;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport function withAuthRedirect(Component: ComponentType<any>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let { isAuth, ...restProps } = props;\r\n        if (!isAuth) return <Redirect to={'/login'} />;\r\n        return <Component {...restProps} />;\r\n    };\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n\r\n    return ConnectedRedirectComponent;\r\n}\r\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["Post","message","likeCount","className","s","src","alt","maxLength10","maxLengthCreator","AddNewPostRedux","reduxForm","form","props","onSubmit","handleSubmit","Field","placeholder","name","tagName","component","FormControl","validate","required","MyPostsContainer","connect","state","postData","profilePage","dispatch","addPost","addNewPost","addPostActionCreator","values","map","p","id","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","ProfileInfo","profile","isLoading","Preloader","photos","large","small","userPhoto","fullName","contacts","github","vk","instagram","twitter","Profile","ProfileContainer","userId","this","match","params","authUserId","toString","getUserProfile","getUserStatus","updateUserStatus","React","compose","isAuth","auth","withRouter","withAuthRedirect","mapStateToProps","Component","restProps","to","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","length","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}